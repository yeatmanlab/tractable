% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/resample.R
\name{sampling_test}
\alias{sampling_test}
\title{Perform repeated sampling tests on an AFQ dataframe.}
\usage{
sampling_test(
  df_tract,
  n_samples,
  dwi_metric,
  tract,
  group_by = "group",
  participant_id = "subjectID",
  sample_uniform = FALSE,
  covariates = NULL,
  additional_terms = NULL,
  k = NULL,
  family = NULL,
  formula = NULL,
  factor_a = NULL,
  factor_b = NULL,
  permute = FALSE
)
}
\arguments{
\item{df_tract}{AFQ Dataframe of node metric values for single tract}

\item{n_samples}{Number of sample tests to perform}

\item{dwi_metric}{The diffusion metric to model (e.g. "FA", "MD")}

\item{tract}{AFQ tract name}

\item{group_by}{The grouping variable used to group nodeID smoothing terms}

\item{participant_id}{The name of the column that encodes participant ID}

\item{sample_uniform}{Boolean flag. If TRUE, shuffling should sample
uniformly from the unique values in the columns. If FALSE, shuffling
will shuffle without replacement.}

\item{covariates}{List of strings of GAM covariates, not including
the smoothing terms over nodes and the random effect due to subjectID.}

\item{additional_terms}{Smoothing terms, not including
the smoothing terms over nodes and the random effect due to subjectID.}

\item{k}{Dimension of the basis used to represent the node smoothing term}

\item{family}{Distribution to use for the gam. Must be 'gamma' or 'beta'}

\item{formula}{Optional explicit formula to use for the GAM. If provided,
this will override the dynamically generated formula build from the
target, covariate, and k inputs. Default = NULL.}

\item{factor_a}{First group factor, string}

\item{factor_b}{Second group factor, string}

\item{permute}{Boolean flag. If TRUE, perform a permutation test.
Otherwise, do a bootstrap simulation.}
}
\value{
Dataframe with bootstrap or permutation test coefficients
}
\description{
When permutation_test == FALSE (the default), this function bootstrap
samples from an AFQ dataframe and returns pairwise differences at each node
for each bootstrap sample. These results can then be used to construct
bootstrap confidence intervals for the node-wise differences.
}
\details{
When permutation_test == TRUE, this function simulates the null distribution
using permutation testing. That is, it shuffles to destroy any relationships
between covariates and dwi_metrics. It then computes node-wise differences
for each shuffled sample.
}
\examples{
\dontrun{
df_afq <- read.csv("/path/to/afq/output.csv")
df_tract <- df_afq[which(df_afq$tractID == tract), ]
bootstrap_coefs <- sampling_test(df_afq,
                                 dwi_metric = "dti_fa",
                                 covariates = list("group", "sex"),
                                 family = "gamma",
                                 k = 40,
                                 n_samples = 1000)
}
}
